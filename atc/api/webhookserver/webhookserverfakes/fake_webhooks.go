// Code generated by counterfeiter. DO NOT EDIT.
package webhookserverfakes

import (
	"encoding/json"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/api/webhookserver"
)

type FakeWebhooks struct {
	CheckResourcesMatchingWebhookPayloadStub        func(lager.Logger, int, string, json.RawMessage, string) (int, error)
	checkResourcesMatchingWebhookPayloadMutex       sync.RWMutex
	checkResourcesMatchingWebhookPayloadArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
		arg4 json.RawMessage
		arg5 string
	}
	checkResourcesMatchingWebhookPayloadReturns struct {
		result1 int
		result2 error
	}
	checkResourcesMatchingWebhookPayloadReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	DeleteWebhookStub        func(int, string) error
	deleteWebhookMutex       sync.RWMutex
	deleteWebhookArgsForCall []struct {
		arg1 int
		arg2 string
	}
	deleteWebhookReturns struct {
		result1 error
	}
	deleteWebhookReturnsOnCall map[int]struct {
		result1 error
	}
	SaveWebhookStub        func(int, atc.Webhook) (bool, error)
	saveWebhookMutex       sync.RWMutex
	saveWebhookArgsForCall []struct {
		arg1 int
		arg2 atc.Webhook
	}
	saveWebhookReturns struct {
		result1 bool
		result2 error
	}
	saveWebhookReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayload(arg1 lager.Logger, arg2 int, arg3 string, arg4 json.RawMessage, arg5 string) (int, error) {
	fake.checkResourcesMatchingWebhookPayloadMutex.Lock()
	ret, specificReturn := fake.checkResourcesMatchingWebhookPayloadReturnsOnCall[len(fake.checkResourcesMatchingWebhookPayloadArgsForCall)]
	fake.checkResourcesMatchingWebhookPayloadArgsForCall = append(fake.checkResourcesMatchingWebhookPayloadArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
		arg4 json.RawMessage
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CheckResourcesMatchingWebhookPayloadStub
	fakeReturns := fake.checkResourcesMatchingWebhookPayloadReturns
	fake.recordInvocation("CheckResourcesMatchingWebhookPayload", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.checkResourcesMatchingWebhookPayloadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayloadCallCount() int {
	fake.checkResourcesMatchingWebhookPayloadMutex.RLock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.RUnlock()
	return len(fake.checkResourcesMatchingWebhookPayloadArgsForCall)
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayloadCalls(stub func(lager.Logger, int, string, json.RawMessage, string) (int, error)) {
	fake.checkResourcesMatchingWebhookPayloadMutex.Lock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.Unlock()
	fake.CheckResourcesMatchingWebhookPayloadStub = stub
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayloadArgsForCall(i int) (lager.Logger, int, string, json.RawMessage, string) {
	fake.checkResourcesMatchingWebhookPayloadMutex.RLock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.RUnlock()
	argsForCall := fake.checkResourcesMatchingWebhookPayloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayloadReturns(result1 int, result2 error) {
	fake.checkResourcesMatchingWebhookPayloadMutex.Lock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.Unlock()
	fake.CheckResourcesMatchingWebhookPayloadStub = nil
	fake.checkResourcesMatchingWebhookPayloadReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWebhooks) CheckResourcesMatchingWebhookPayloadReturnsOnCall(i int, result1 int, result2 error) {
	fake.checkResourcesMatchingWebhookPayloadMutex.Lock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.Unlock()
	fake.CheckResourcesMatchingWebhookPayloadStub = nil
	if fake.checkResourcesMatchingWebhookPayloadReturnsOnCall == nil {
		fake.checkResourcesMatchingWebhookPayloadReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.checkResourcesMatchingWebhookPayloadReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWebhooks) DeleteWebhook(arg1 int, arg2 string) error {
	fake.deleteWebhookMutex.Lock()
	ret, specificReturn := fake.deleteWebhookReturnsOnCall[len(fake.deleteWebhookArgsForCall)]
	fake.deleteWebhookArgsForCall = append(fake.deleteWebhookArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteWebhookStub
	fakeReturns := fake.deleteWebhookReturns
	fake.recordInvocation("DeleteWebhook", []interface{}{arg1, arg2})
	fake.deleteWebhookMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWebhooks) DeleteWebhookCallCount() int {
	fake.deleteWebhookMutex.RLock()
	defer fake.deleteWebhookMutex.RUnlock()
	return len(fake.deleteWebhookArgsForCall)
}

func (fake *FakeWebhooks) DeleteWebhookCalls(stub func(int, string) error) {
	fake.deleteWebhookMutex.Lock()
	defer fake.deleteWebhookMutex.Unlock()
	fake.DeleteWebhookStub = stub
}

func (fake *FakeWebhooks) DeleteWebhookArgsForCall(i int) (int, string) {
	fake.deleteWebhookMutex.RLock()
	defer fake.deleteWebhookMutex.RUnlock()
	argsForCall := fake.deleteWebhookArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWebhooks) DeleteWebhookReturns(result1 error) {
	fake.deleteWebhookMutex.Lock()
	defer fake.deleteWebhookMutex.Unlock()
	fake.DeleteWebhookStub = nil
	fake.deleteWebhookReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWebhooks) DeleteWebhookReturnsOnCall(i int, result1 error) {
	fake.deleteWebhookMutex.Lock()
	defer fake.deleteWebhookMutex.Unlock()
	fake.DeleteWebhookStub = nil
	if fake.deleteWebhookReturnsOnCall == nil {
		fake.deleteWebhookReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteWebhookReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWebhooks) SaveWebhook(arg1 int, arg2 atc.Webhook) (bool, error) {
	fake.saveWebhookMutex.Lock()
	ret, specificReturn := fake.saveWebhookReturnsOnCall[len(fake.saveWebhookArgsForCall)]
	fake.saveWebhookArgsForCall = append(fake.saveWebhookArgsForCall, struct {
		arg1 int
		arg2 atc.Webhook
	}{arg1, arg2})
	stub := fake.SaveWebhookStub
	fakeReturns := fake.saveWebhookReturns
	fake.recordInvocation("SaveWebhook", []interface{}{arg1, arg2})
	fake.saveWebhookMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWebhooks) SaveWebhookCallCount() int {
	fake.saveWebhookMutex.RLock()
	defer fake.saveWebhookMutex.RUnlock()
	return len(fake.saveWebhookArgsForCall)
}

func (fake *FakeWebhooks) SaveWebhookCalls(stub func(int, atc.Webhook) (bool, error)) {
	fake.saveWebhookMutex.Lock()
	defer fake.saveWebhookMutex.Unlock()
	fake.SaveWebhookStub = stub
}

func (fake *FakeWebhooks) SaveWebhookArgsForCall(i int) (int, atc.Webhook) {
	fake.saveWebhookMutex.RLock()
	defer fake.saveWebhookMutex.RUnlock()
	argsForCall := fake.saveWebhookArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWebhooks) SaveWebhookReturns(result1 bool, result2 error) {
	fake.saveWebhookMutex.Lock()
	defer fake.saveWebhookMutex.Unlock()
	fake.SaveWebhookStub = nil
	fake.saveWebhookReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeWebhooks) SaveWebhookReturnsOnCall(i int, result1 bool, result2 error) {
	fake.saveWebhookMutex.Lock()
	defer fake.saveWebhookMutex.Unlock()
	fake.SaveWebhookStub = nil
	if fake.saveWebhookReturnsOnCall == nil {
		fake.saveWebhookReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.saveWebhookReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeWebhooks) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkResourcesMatchingWebhookPayloadMutex.RLock()
	defer fake.checkResourcesMatchingWebhookPayloadMutex.RUnlock()
	fake.deleteWebhookMutex.RLock()
	defer fake.deleteWebhookMutex.RUnlock()
	fake.saveWebhookMutex.RLock()
	defer fake.saveWebhookMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWebhooks) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhookserver.Webhooks = new(FakeWebhooks)
