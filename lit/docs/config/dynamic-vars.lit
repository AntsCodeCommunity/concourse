\title{Fetching \code{((vars))} at Runtime}{runtime-vars}

\use-plugin{concourse-docs}

Concourse can read values from "var sources" - typically credential managers
like Vault - at runtime. This keeps them out of your configuration and
prevents them from being stored in your database. Values will be read from
the credential manager and optionally \reference{creds-caching}{cached}.

The following configurations can be parameterized through a \code{((var))}
source:

\list{
  \reference{resource-source} under \reference{resources} in a pipeline
}{
  \reference{resource-type-source} under \reference{resource-types} in a
  pipeline
}{
  \reference{resource-webhook-token} under \reference{resources} in a
  pipeline
}{
  \reference{task-step-params} on a task step in a pipeline
}{
  \reference{tasks} in their entirety - whether from
  \reference{task-step-file} or \reference{task-step-config} in a pipeline,
  or a config executed with \reference{fly-execute}
}

Concourse will fetch values for \code{((vars))} as late as possible - i.e. when
a step using them is about to execute. This allows the credentials to have
limited lifetime and tight rotation policies.


\section{
  \title{The Cluster-wide Credential Manager}{cluster-wide-credential-manager}

  Concourse can be configured with a single cluster-wide credential manager,
  which acts as a source for any \code{((vars))} which do not specify a source
  name.

  See \reference{creds} for more information.
}

\section{
  \title{\code{((var))} Sources}{var-sources}

  \warn{
    \code{var_sources} was introduced in Concourse v5.8.0. It is considered an
    \bold{experimental} feature until its associated
    \link{RFC}{https://github.com/concourse/rfcs/pull/39} is resolved.
  }

  \code{((var))} sources are the successor to the cluster-wide credential
  manager.

  Instead of a singleton, many sources can be configured, each with a name.
  This name is used to explicitly reference the source for vars, e.g.
  \code{((my-vault:test-user.username))}. See \reference{var-syntax} for a
  detailed explanation of this syntax.

  Currently, \code{((var))} sources can only be configured at the
  pipeline-level, through \reference{pipeline-var-sources}. Soon we will
  introduce cluster-wide \code{((var))} sources and begin deprecating the
  cluster-wide credential manager.

  Each \code{((var))} source has the following configuration:

  \define-attribute{name: string}{
    \italic{Required.} The name of the \code{((var))} source. This should be short and
    simple. This name will be referenced
    \reference{var-syntax}{\code{((vars))}} throughout the config.
  }{var-source-name}

  \define-attribute{type: string}{
    \italic{Required.} The type of the \code{((var))} source. This corresponds to one of
    the supported credential managers.

    Currently, only two types are supported: \code{vault} and \code{dummy}. This
    will expand in the future to include all supported credential managers.
  }{var-source-type}

  \define-attribute{config: object}{
    \italic{Required.} The configuration for the \code{((var))} source.

    Arbitrary configuration for the \code{((var))} source. The schema of this value is
    entirely dependent on the type. Each supported \code{((var))} source type, and their
    config schema, are documented below.
  }{var-source-config}

  As the configuration for a \code{((var))} source is entirely dependent on its
  \code{type}, each supported type documents its own schema below:

  \split-sections
  \table-of-contents

  \section{
    \title{\aux{The }Vault \code{((var))} source}{vault-var-source}

    The \code{vault} type supports configuring a
    \link{Vault}{https://www.vaultproject.io} server as a \code{((var))}
    source.

    \warn{
      For a more complete explanation on how to set up Vault, check out the
      docs for the \reference{vault-credential-manager}. The documentation here
      is going to be pretty sparse until \code{var_sources} is more complete so
      as to avoid duplication.

      Consider this "early access" - we don't expect the following
      configuration schema to change, but until we fully commit to this
      direction and have cluster-wide var sources we don't want to shuffle
      around the docs too much.
    }

    The following fields can be set under \reference{var-source-config}:

    \define-attribute{url: string}{
      \italic{Required.} The URL of the Vault API.
    }{vault-var-source-url}

    \define-attribute{ca_cert: string}{
      \italic{Optional.} The PEM encoded contents of a CA certificate to use
      when connecting to the API.
    }{vault-var-source-ca-cert}

    \define-attribute{path_prefix: string}{
      \italic{Optional. Default \code{/concourse}.} A prefix under which to
      look for all credential values.

      See \reference{vault-credential-lookup-rules} for more information.
    }{vault-var-source-path-prefix}

    \define-attribute{shared_path: string}{
      \italic{Optional.} An additional path under which credentials will be
      looked up.

      See \reference{vault-shared-path} for more information.
    }{vault-var-source-shared-path}

    \define-attribute{namespace: string}{
      \italic{Optional.} A \link{Vault
      namespace}{https://www.vaultproject.io/docs/enterprise/namespaces/index.html}
      to operate under.
    }{vault-var-source-namespace}

	  \define-attribute{client_cert: string}{
      \italic{Optional.} A PEM encoded client certificate, for use with TLS
      based auth.

      See \reference{vault-cert-auth} for more information.
    }{vault-var-source-client-cert}

	  \define-attribute{client_key: string}{
      \italic{Optional.} A PEM encoded client key, for use with TLS based auth.

      See \reference{vault-cert-auth} for more information.
    }{vault-var-source-client-key}

	  \define-attribute{server_name: string}{
      \italic{Optional.} The expected name of the server when connecting
      through TLS.
    }{vault-var-source-server-name}

	  \define-attribute{insecure_skip_verify: boolean}{
      \italic{Optional.} Skip TLS validation. Not recommended. Don't do it. No
      really, don't.
    }{vault-var-source-insecure-skip-verify}

	  \define-attribute{client_token: string}{
      \italic{Optional.} Authenticate via a periodic client token.

      See \reference{vault-periodic-token} for more information.
    }{vault-var-source-client-token}

	  \define-attribute{auth_backend: string}{
      \italic{Optional.} Authenticate using an auth backend, e.g. \code{cert}
      or \code{approle}.

      See \reference{vault-approle-auth} or \reference{vault-cert-auth} for
      more information.
    }{vault-var-source-auth-backend}

	  \define-attribute{auth_params: {string: string}}{
      \italic{Optional.} A key-value map of parameters to pass during
      authentication.

      See \reference{vault-approle-auth} for more information.
    }{vault-var-source-auth-params}

	  \define-attribute{auth_max_ttl: duration}{
      \italic{Optional. Go duration format.} Maximum duration to elapse before
      forcing the client to log in again.
    }{vault-var-source-auth-max-ttl}

	  \define-attribute{auth_retry_max: duration}{
      \italic{Optional. Go duration format, default \code{5m}.} When failing to
      authenticate, give up after this amount of time.
    }{vault-var-source-auth-retry-max}

	  \define-attribute{auth_retry_initial: duration}{
      \italic{Optional. Go duration format, default \code{1s}.} When retrying
      during authentication, start with this retry interval. The interval will
      increase exponentially until \code{auth_retry_max} is reached.
    }{vault-var-source-auth-retry-interval}
  }

  \section{
    \title{\aux{The }Dummy \code{((var))} source}{dummy-var-source}

    The \code{dummy} type supports configuring a static map of vars to values.

    This is really only useful if you have no better alternative for credential
    management but still have sensitive values that you would like to
    \reference{creds-redacting}{redact} them from build output.

    The following fields can be set under \reference{var-source-config}:

    \define-attribute{vars: object}{
      \italic{Required.} A mapping of var name to var value.
    }{dummy-var-source-vars}
  }
}

\right-side{Examples}{
  \example{Dummy Vars}{
    Here's a copy-pasteable example using the \reference{dummy-var-source},
    just to demonstrate named \code{((var))} syntax:

    \codeblock{yaml}{{{
    var_sources:
    - name: dumb
      type: dummy
      config:
        vars:
          simple: hello!
          user:
            username: big
            password: sekrit

    jobs:
    - name: print-creds
      plan:
      - task: print
        config:
          platform: linux

          image_resource:
            type: registry-image
            source: {repository: ubuntu}

          run:
            path: bash
            args:
            - -c
            - |
              echo simple: ((dumb:simple))
              echo username: ((dumb:user.username))
              echo password: ((dumb:user.password))
    }}}

    The \code{print-creds} job above will print the following:

    \code{{{
    simple: hello!
    username: big
    password: sekrit
    }}}

    With \reference{creds-redacting}{credential redaction} enabled, the output
    above will actually print the following:

    \code{{{
    simple: ((redacted))
    username: ((redacted))
    password: ((redacted))
    }}}

    The \code{dummy} var source type is, well, pretty dumb. It just provides
    whatever vars you tell it to. It primarily exists for testing purposes, and
    is useful as a stand-in in place of a real credential manager where you can
    at least have the credentials redacted from build output.

    In production, you'll probably want to use something like
    \reference{vault-var-source}{\code{vault}} instead.
  }
}
